#
# Copyright (C) 2020 Geon Technologies, LLC
#
# This file is part of FINS.
#
# FINS is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# FINS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#

variables:
stages:
    - prereqs
    - test-core
    - test-backends
    - package
image: centos:7

.install-prereqs: &install-prereqs |
    yum install -y epel-release
    yum install -y python36 python36-pip python-jinja2 octave make gcc glibc.i686
    python3 -m pip install --upgrade pip setuptools
    python3 -m pip install .

test-core:
    stage: test-core
    before_script:
        - *install-prereqs
    script:
        - 'cd test/node'
        - 'fins fins.json'
        - 'cd ../application'
        - 'fins application_test.json'
        - 'cd ../../tutorials/power_converter'
        - 'fins fins.json'
        - 'cd ../power_application'
        - 'fins fins.json'
    tags:
        - fpga

test-vivado:
    stage: test-backends
    variables:
        VIVADO_VERSION: '2019.1'
        VIVADO_PATH: '/opt/fpga/Xilinx/Vivado/$VIVADO_VERSION'
    before_script:
        - *install-prereqs
        - 'python3 -m pip install ./vivado'
    script:
        - 'source $VIVADO_PATH/settings64.sh'
        - 'cd test/'
        - './test_backend.sh vivado'
    artifacts:
        when: on_failure
        paths:
            - test/**/log/*
            - tutorial/**/log/*
    except:
        variables:
            [ $VIVADO_DISABLE == 'true' ]
    tags:
        - fpga

test-quartus:
    stage: test-backends
    variables:
        QUARTUS_VERSION: '19.4'
        QUARTUS_PATH: '/opt/fpga/Intel/intelFPGA_pro/$QUARTUS_VERSION'
    before_script:
        - *install-prereqs
        - 'python3 -m pip install ./quartus'
    script:
        - 'export PATH=$PATH:$QUARTUS_PATH/quartus/bin:$QUARTUS_PATH/modelsim_ase/bin:$QUARTUS_PATH/qsys/bin'
        - 'cd test/'
        - './test_backend.sh quartus'
    artifacts:
        when: on_failure
        paths:
            - test/**/log/*
            - tutorial/**/log/*
    except:
        variables:
            [ $QUARTUS_DISABLE == 'true' ]
    tags:
        - fpga

.rpmbuild:
    stage: package
    image: centos:7
    before_script:
        - yum install -y epel-release rpm-build rpmdevtools
        - yum install -y python3 python3-pip
        - python3 -m pip install --user -U pip setuptools
        # Create build tree; can't rely on bdist_rpm
        - rpmdev-setuptree
        # Neutralize brp-python-bytecompile
        - sed -i '2iexit 0' /usr/lib/rpm/brp-python-bytecompile
    script:
        - python3 setup.py bdist_rpm --spec-only
        - mv dist/*.spec ~/rpmbuild/SPECS/
        - cd ~/rpmbuild/SPECS
        # Patch spec file
        - sed -i 's/-O1/--no-compile/g' *.spec && cd ~/rpmbuild
        # tarball sources
        - >-
          export NAME=`grep "define name" ~/rpmbuild/SPECS/*.spec |
          cut -d" " -f 3`
        - >-
          export VER=`grep "define version" ~/rpmbuild/SPECS/*.spec |
          cut -d" " -f 3`
        - cd $CI_PROJECT_DIR
        - cp -R . "/tmp/$NAME-$VER"
        - cd /tmp
        - >-
          tar -czvf
          ~/rpmbuild/SOURCES/$NAME-$VER.tar.gz --exclude='.gitlab-ci.yml'
          $NAME-$VER
        # Build RPM old-fashioned way
        - cd ~/rpmbuild
        - rpmbuild -bb SPECS/*.spec
        - mv RPMS/noarch/*.rpm $CI_PROJECT_DIR/dist/
    after_script:
        # Remove build tree
        - rm -rf ~/rpmbuild
        - rm -rf /tmp/$NAME-$VER
        # Restore brp-python-bytecompile
        - sed -i '2d' /usr/lib/rpm/brp-python-bytecompile
    needs: []
    artifacts:
        paths:
            - dist/*.rpm

rpmbuild:
    extends: .rpmbuild
    variables:
        RPM_BRANCH: 'master'
    rules:
        - if: '$CI_COMMIT_BRANCH == $RPM_BRANCH'
        - if: '$CI_COMMIT_TAG'
